# ¬©Ô∏è Dan Gazizullin, 2021-2023
# This file is a part of Hikka Userbot
# üåê https://github.com/hikariatama/Hikka
# You can redistribute it and/or modify it under the terms of the GNU AGPLv3
# üîë https://www.gnu.org/licenses/agpl-3.0.html

import logging

from hikkatl.tl.types import Message

from .. import loader, utils

logger = logging.getLogger(__name__)


@loader.tds
class Translator(loader.Module):
    """Translates text (obviously)"""

    e = "<emoji document_id=5210952531676504517>‚ùå</emoji>"

    strings = {
        "name": "Translator",
        "no_args": f"{e} <b>No arguments provided</b>",
        "error": f"{e} <b>Unable to translate text</b>",
        "language": "en",
    }

    strings_ru = {
        "no_args": f"{e} <b>–ù–µ —É–∫–∞–∑–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã</b>",
        "error": f"{e} <b>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç</b>",
        "language": "ru",
        "_cls_doc": "–ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç (–æ—á–µ–≤–∏–¥–Ω–æ)",
    }

    strings_de = {
        "no_args": f"{e} <b>Keine Argumente angegeben</b>",
        "error": f"{e} <b>Konnte Text nicht √ºbersetzen</b>",
        "language": "de",
        "_cls_doc": "√úbersetzt den Text (offensichtlich)",
    }

    strings_es = {
        "no_args": f"{e} <b>No se han proporcionado argumentos</b>",
        "error": f"{e} <b>No se pudo traducir el texto</b>",
        "language": "es",
        "_cls_doc": "Traduce el texto (obviamente)",
    }

    strings_uz = {
        "no_args": f"{e} <b>Argumentlar berilmadi</b>",
        "error": f"{e} <b>Matnni tarjima qilishda xatolik yuz berdi</b>",
        "language": "uz",
        "_cls_doc": "Matnni tarjima qilish (a'lohida)",
    }

    strings_tr = {
        "no_args": f"{e} <b>Arg√ºmanlar verilmedi</b>",
        "error": f"{e} <b>Metin √ßevirilemedi</b>",
        "language": "tr",
        "_cls_doc": "Metni √ßevir (a√ßƒ±k√ßasƒ±)",
    }

    strings_kk = {
        "no_args": f"{e} <b>–ê—Ä–≥—É–º–µ–Ω—Ç—Ç–µ—Ä –∫”©—Ä—Å–µ—Ç—ñ–ª–º–µ–≥–µ–Ω</b>",
        "error": f"{e} <b>–ú”ô—Ç—ñ–Ω–¥—ñ —Ç—ñ–ª–¥–µ–Ω —Ç“Ø—Å—ñ—Ä–º–µ–¥—ñ</b>",
        "language": "kk",
        "_cls_doc": "–ú”ô—Ç—ñ–Ω–¥—ñ —Ç—ñ–ª–¥–µ–Ω —Ç“Ø—Å—ñ—Ä (–∞“ì—ã–ª—à—ã–Ω–¥–∞–π)",
    }

    strings_it = {
        "no_args": f"{e} <b>Nessun argomento fornito</b>",
        "error": f"{e} <b>Impossibile tradurre il testo</b>",
        "language": "it",
        "_cls_doc": "Traduci il testo (ovviamente)",
    }

    strings_fr = {
        "no_args": f"{e} <b>Aucun argument fourni</b>",
        "error": f"{e} <b>Impossible de traduire le texte</b>",
        "language": "fr",
        "_cls_doc": "Traduit le texte (√©videmment)",
    }

    strings_tt = {
        "no_args": f"{e} <b>–ê—Ä–≥—É–º–µ–Ω—Ç–ª–∞—Ä –∫“Ø—Ä—Å”ô—Ç–µ–ª–º”ô–≥”ô–Ω</b>",
        "error": f"{e} <b>–ú”ô—Ç–∏–Ω–Ω–µ —Ç”ô—Ä“ó–µ–º”ô –∏—Ç“Ø –º”©–º–∫–∏–Ω —Ç“Ø–≥–µ–ª</b>",
        "language": "tt",
        "_cls_doc": "–ú”ô—Ç–∏–Ω–Ω–µ —Ç”ô—Ä“ó–µ–º”ô –∏—Ç“Ø (–∞“ì—ã–ª—à—ã–Ω–¥–∞–π)",
    }

    @loader.command(
        ru_doc="[—è–∑—ã–∫] [—Ç–µ–∫—Å—Ç] - –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç",
        de_doc="[Sprache] [Text] - √úbersetze Text",
        es_doc="[idioma] [texto] - Traducir texto",
        uz_doc="[til] [matn] - Matnni tarjima qilish",
        tr_doc="[dil] [metin] - Metni √ßevir",
        kk_doc="[—Ç—ñ–ª] [–º”ô—Ç—ñ–Ω] - –ú”ô—Ç—ñ–Ω–¥—ñ —Ç—ñ–ª–¥–µ–Ω —Ç“Ø—Å—ñ—Ä",
        it_doc="[lingua] [testo] - Traduci testo",
        fr_doc="[langue] [texte] - Traduire le texte",
        tt_doc="[—Ç–∏–ª] [–º”ô—Ç–∏–Ω] - –ú”ô—Ç–∏–Ω–Ω–µ —Ç”ô—Ä“ó–µ–º”ô –∏—Ç“Ø",
    )
    async def tr(self, message: Message):
        """[language] [text] - Translate text"""
        if not (args := utils.get_args_raw(message)):
            text = None
            lang = self.strings("language")
        else:
            lang = args.split(maxsplit=1)[0]
            if len(lang) != 2:
                text = args
                lang = self.strings("language")
            else:
                try:
                    text = args.split(maxsplit=1)[1]
                except IndexError:
                    text = None

        if not text:
            if not (reply := await message.get_reply_message()):
                await utils.answer(message, self.strings("no_args"))
                return

            text = reply.raw_text
            entities = reply.entities
        else:
            entities = []

        message.raw_text = text
        message.entities = entities

        try:
            await utils.answer(
                message,
                await self._client.translate(message.peer_id, message, lang),
            )
        except Exception:
            logger.exception("Unable to translate text")
            await utils.answer(message, self.strings("error"))
