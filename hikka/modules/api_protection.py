#             ‚ñà ‚ñà ‚ñÄ ‚ñà‚ñÑ‚ñÄ ‚ñÑ‚ñÄ‚ñà ‚ñà‚ñÄ‚ñà ‚ñÄ
#             ‚ñà‚ñÄ‚ñà ‚ñà ‚ñà ‚ñà ‚ñà‚ñÄ‚ñà ‚ñà‚ñÄ‚ñÑ ‚ñà
#              ¬© Copyright 2022
#           https://t.me/hikariatama
#
# üîí      Licensed under the GNU AGPLv3
# üåê https://www.gnu.org/licenses/agpl-3.0.html

import asyncio
import io
import json
import logging
import time

from telethon.tl import functions
from telethon.tl.tlobject import TLRequest
from telethon.tl.types import Message

from .. import loader, utils
from ..inline.types import InlineCall

logger = logging.getLogger(__name__)

GROUPS = [
    "auth",
    "account",
    "users",
    "contacts",
    "messages",
    "updates",
    "photos",
    "upload",
    "help",
    "channels",
    "bots",
    "payments",
    "stickers",
    "phone",
    "langpack",
    "folders",
    "stats",
]


def decapitalize(string: str) -> str:
    return string[0].lower() + string[1:]


CONSTRUCTORS = {
    decapitalize(
        method.__class__.__name__.rsplit("Request", 1)[0]
    ): method.CONSTRUCTOR_ID
    for method in utils.array_sum(
        [
            [
                method
                for method in dir(getattr(functions, group))
                if isinstance(method, TLRequest)
            ]
            for group in GROUPS
        ]
    )
}


@loader.tds
class APIRatelimiterMod(loader.Module):
    """Helps userbot avoid spamming Telegram API"""

    strings = {
        "name": "APILimiter",
        "warning": (
            "<emoji document_id=5312383351217201533>‚ö†Ô∏è</emoji>"
            " <b>WARNING!</b>\n\nYour account exceeded the limit of requests, specified"
            " in config. In order to prevent Telegram API Flood, userbot has been"
            " <b>fully frozen</b> for {} seconds. Further info is provided in attached"
            " file. \n\nIt is recommended to get help in <code>{prefix}support</code>"
            " group!\n\nIf you think, that it is an intended behavior, then wait until"
            " userbot gets unlocked and next time, when you will be going to perform"
            " such an operation, use <code>{prefix}suspend_api_protect</code> &lt;time"
            " in seconds&gt;"
        ),
        "args_invalid": (
            "<emoji document_id=5312526098750252863>üö´</emoji> <b>Invalid arguments</b>"
        ),
        "suspended_for": (
            "<emoji document_id=5458450833857322148>üëå</emoji> <b>API Flood Protection"
            " is disabled for {} seconds</b>"
        ),
        "on": (
            "<emoji document_id=5458450833857322148>üëå</emoji> <b>Protection enabled</b>"
        ),
        "off": (
            "<emoji document_id=5458450833857322148>üëå</emoji> <b>Protection"
            " disabled</b>"
        ),
        "u_sure": "‚ö†Ô∏è <b>Are you sure?</b>",
        "_cfg_time_sample": "Time sample through which the bot will count requests",
        "_cfg_threshold": "Threshold of requests to trigger protection",
        "_cfg_local_floodwait": (
            "Freeze userbot for this amount of time, if request limit exceeds"
        ),
        "_cfg_forbidden_methods": (
            "Forbid specified methods from being executed throughout external modules"
        ),
        "btn_no": "üö´ No",
        "btn_yes": "‚úÖ Yes",
        "web_pin": (
            "üîì <b>Click the button below to show Werkzeug debug PIN. Do not give it to"
            " anyone.</b>"
        ),
        "web_pin_btn": "üêû Show Werkzeug PIN",
    }

    strings_ru = {
        "warning": (
            "<emoji document_id=5312383351217201533>‚ö†Ô∏è</emoji>"
            " <b>–í–ù–ò–ú–ê–ù–ò–ï!</b>\n\n–ê–∫–∫–∞—É–Ω—Ç –≤—ã—à–µ–ª –∑–∞ –ª–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤, —É–∫–∞–∑–∞–Ω–Ω—ã–µ –≤"
            " –∫–æ–Ω—Ñ–∏–≥–µ. –° —Ü–µ–ª—å—é –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Ñ–ª—É–¥–∞ Telegram API, —é–∑–µ—Ä–±–æ—Ç –±—ã–ª"
            " <b>–ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–º–æ—Ä–æ–∂–µ–Ω</b> –Ω–∞ {} —Å–µ–∫—É–Ω–¥. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
            " –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∞ –≤ —Ñ–∞–π–ª–µ –Ω–∏–∂–µ. \n\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∑–∞ –ø–æ–º–æ—â—å—é –≤"
            " <code>{prefix}support</code> –≥—Ä—É–ø–ø—É!\n\n–ï—Å–ª–∏ —Ç—ã —Å—á–∏—Ç–∞–µ—à—å, —á—Ç–æ —ç—Ç–æ"
            " –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ —é–∑–µ—Ä–±–æ—Ç–∞, –ø—Ä–æ—Å—Ç–æ –ø–æ–¥–æ–∂–¥–∏, –ø–æ–∫–∞ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è"
            " —Ç–∞–π–º–µ—Ä –∏ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑, –∫–æ–≥–¥–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä—É–µ—à—å –≤—ã–ø–æ–ª–Ω—è—Ç—å —Ç–∞–∫—É—é"
            " —Ä–µ—Å—É—Ä—Å–æ–∑–∞—Ç—Ä–∞—Ç–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é, –∏—Å–ø–æ–ª—å–∑—É–π"
            " <code>{prefix}suspend_api_protect</code> &lt;–≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö&gt;"
        ),
        "args_invalid": (
            "<emoji document_id=5312526098750252863>üö´</emoji> <b>–ù–µ–≤–µ—Ä–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã</b>"
        ),
        "suspended_for": (
            "<emoji document_id=5458450833857322148>üëå</emoji> <b>–ó–∞—â–∏—Ç–∞ API –æ—Ç–∫–ª—é—á–µ–Ω–∞"
            " –Ω–∞ {} —Å–µ–∫—É–Ω–¥</b>"
        ),
        "on": "<emoji document_id=5458450833857322148>üëå</emoji> <b>–ó–∞—â–∏—Ç–∞ –≤–∫–ª—é—á–µ–Ω–∞</b>",
        "off": (
            "<emoji document_id=5458450833857322148>üëå</emoji> <b>–ó–∞—â–∏—Ç–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞</b>"
        ),
        "u_sure": "<emoji document_id=5312383351217201533>‚ö†Ô∏è</emoji> <b>–¢—ã —É–≤–µ—Ä–µ–Ω?</b>",
        "_cfg_time_sample": (
            "–í—Ä–µ–º–µ–Ω–Ω–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥–µ—Ç —Å—á–∏—Ç–∞—Ç—å—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤"
        ),
        "_cfg_threshold": "–ü–æ—Ä–æ–≥ –∑–∞–ø—Ä–æ—Å–æ–≤, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–∞—â–∏—Ç–∞",
        "_cfg_local_floodwait": (
            "–ó–∞–º–æ—Ä–æ–∑–∏—Ç—å —é–∑–µ—Ä–±–æ—Ç–∞ –Ω–∞ —ç—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥, –µ—Å–ª–∏ –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–µ–≤—ã—à–µ–Ω"
        ),
        "_cfg_forbidden_methods": (
            "–ó–∞–ø—Ä–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –≤–æ –≤—Å–µ—Ö –≤–Ω–µ—à–Ω–∏—Ö –º–æ–¥—É–ª—è—Ö"
        ),
        "btn_no": "üö´ –ù–µ—Ç",
        "btn_yes": "‚úÖ –î–∞",
        "web_pin": (
            "üîì <b>–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å Werkzeug debug PIN. –ù–µ –¥–∞–≤–∞–π –µ–≥–æ"
            " –Ω–∏–∫–æ–º—É.</b>"
        ),
        "web_pin_btn": "üêû –ü–æ–∫–∞–∑–∞—Ç—å Werkzeug PIN",
    }

    strings_de = {
        "warning": (
            "<emoji document_id=5312383351217201533>‚ö†Ô∏è</emoji>"
            " <b>Achtung!</b>\n\nDas Konto hat die in der Konfiguration angegebenen"
            " Grenzwerte f√ºr Anfragen √ºberschritten. Um Telegram API-Flooding zu"
            " verhindern, wurde der <b>ganze Userbot</b> f√ºr {} Sekunden"
            " eingefroren. Weitere Informationen finden Sie im unten angef√ºgten"
            " Datei.\n\nWir empfehlen Ihnen, sich mit Hilfe der <code>{prefix}"
            "support</code> Gruppe zu helfen!\n\nWenn du denkst, dass dies"
            " geplantes Verhalten des Userbots ist, dann warte einfach, bis der"
            " Timer abl√§uft und versuche beim n√§chsten Mal, eine so ressourcen"
            " intensive Operation wie <code>{prefix}suspend_api_protect</code>"
            " &lt;Zeit in Sekunden&gt; zu planen."
        ),
        "args_invalid": (
            "<emoji document_id=5312526098750252863>üö´</emoji> <b>Ung√ºltige"
            " Argumente</b>"
        ),
        "suspended_for": (
            "<emoji document_id=5458450833857322148>üëå</emoji> <b>API Flood"
            " Protection ist f√ºr {} Sekunden deaktiviert</b>"
        ),
        "on": (
            "<emoji document_id=5458450833857322148>üëå</emoji> <b>Schutz aktiviert</b>"
        ),
        "off": (
            "<emoji document_id=5458450833857322148>üëå</emoji> <b>Schutz deaktiviert</b>"
        ),
        "u_sure": "‚ö†Ô∏è <b>Bist du sicher?</b>",
        "_cfg_time_sample": "Zeitintervall, in dem die Anfragen gez√§hlt werden",
        "_cfg_threshold": (
            "Schwellenwert f√ºr Anfragen, ab dem der Schutz aktiviert wird"
        ),
        "_cfg_local_floodwait": (
            "Einfrieren des Userbots f√ºr diese Anzahl von Sekunden, wenn der Grenzwert"
            " √ºberschritten wird"
        ),
        "_cfg_forbidden_methods": "Verbotene Methoden in allen externen Modulen",
        "btn_no": "üö´ Nein",
        "btn_yes": "‚úÖ Ja",
        "web_pin": (
            "üîì <b>Dr√ºcke auf die Schaltfl√§che unten, um den Werkzeug debug PIN"
            " anzuzeigen. Gib ihn niemandem.</b>"
        ),
        "web_pin_btn": "üêû Werkzeug PIN anzeigen",
    }

    strings_tr = {
        "warning": (
            "<emoji document_id=5312383351217201533>‚ö†Ô∏è</emoji>"
            " <b>Dikkat!</b>\n\nHesabƒ±n ayarlarda belirtilmi≈ü istek sƒ±nƒ±rƒ±nƒ± a≈ütƒ±."
            " Telegram API Flood‚Äôunu √∂nlemek i√ßin t√ºm <b>kullanƒ±cƒ± botu<b> {} saniye"
            " boyunca durduruldu. Daha fazla bilgi almak i√ßin ekteki dosyayƒ±"
            " inceleyebilirsiniz. /n/ Ayrƒ±ca <code>{prefix}Destek</code> grubundan"
            " yardƒ±m almanƒ±z √∂nerilmektedir. Eƒüer bu i≈ülemin kasƒ±tlƒ± bir i≈ülem olduƒüunu"
            " d√º≈ü√ºn√ºyorsanƒ±z, kullanƒ±cƒ± botunuzun a√ßƒ±lmasƒ±nƒ±n bekleyin ve bu tarz bir"
            " i≈ülem ger√ßekle≈ütireceƒüiniz sƒ±radaki sefer"
            " <code>{prefix}suspend_api_protect</code> &lt;saniye&gt; kodunu kullanƒ±n."
        ),
        "args_invalid": (
            "<emoji document_id=5312526098750252863>üö´</emoji> <b>Ge√ßersiz"
            " arg√ºmanlar</b>"
        ),
        "suspended_for": (
            "<emoji document_id=5458450833857322148>üëå</emoji> <b>API Flood korumasƒ± {}"
            " saniyeliƒüine durduruldu.</b>"
        ),
        "on": (
            "<emoji document_id=5458450833857322148>üëå</emoji> <b>Koruma"
            " aktifle≈ütirildi.</b>"
        ),
        "off": (
            "<emoji document_id=5458450833857322148>üëå</emoji> <b>Koruma"
            " de-aktifle≈ütirildi</b>"
        ),
        "u_sure": "‚ö†Ô∏è <b>Emin misin?</b>",
        "_cfg_time_sample": "Saniyede sayƒ±lan isteklerin zaman aralƒ±ƒüƒ±",
        "_cfg_threshold": "Korumanƒ±n etkinle≈üeceƒüi sƒ±nƒ±r deƒüeri",
        "_cfg_local_floodwait": (
            "Telegram API sƒ±nƒ±r deƒüeri a≈üƒ±ldƒ±ƒüƒ±nda kullanƒ±cƒ± botu bir s√ºre durdurulur"
        ),
        "_cfg_forbidden_methods": (
            "Belirtili metodlarƒ±n harici mod√ºller tarafƒ±ndan √ßalƒ±≈ütƒ±rƒ±lmasƒ±nƒ± yasakla"
        ),
        "btn_no": "üö´ Hayƒ±r",
        "btn_yes": "‚úÖ Evet",
        "web_pin": (
            "üîì <b>Werkzeug hata ayƒ±klama PIN'ini g√∂stermek i√ßin a≈üaƒüƒ±daki d√ºƒümeyi"
            " tƒ±klayƒ±n. Onu kimseye vermeyin.</b>"
        ),
        "web_pin_btn": "üêû Werkzeug PIN'ini g√∂ster",
    }

    strings_uz = {
        "warning": (
            "<emoji document_id=5312383351217201533>‚ö†Ô∏è</emoji>"
            " <b>Ogohlantirish!</b>\n\nBu hisob uchun konfiguratsiyada ko'rsatilgan"
            " chegaralar chegarani o'zgartirgan.\n\nTelegram API Flood"
            " to'xtatish uchun, bu <b>hammasi userbot</b> uchun {} sekundni"
            " blokirovka qilindi. Batafsil ma'lumot uchun pastdagi faylni o'qing.\n\n"
            "Yordam uchun <code>{prefix}support</code> guruhidan foydalaning!\n\nAgar"
            " siz hisobni botning yordamchisi bo'lishi kerak bo'lgan amalni bajarishga"
            " imkoniyat berishga o'xshaysiz, unda faqat blokirovkani to'xtatish uchun"
            " <code>{prefix}suspend_api_protect</code> &lt;sekund&gt; dan foydalaning."
        ),
        "args_invalid": (
            "<emoji document_id=5312526098750252863>üö´</emoji> <b>Noto'g'ri argument</b>"
        ),
        "suspended_for": (
            "<emoji document_id=5458450833857322148>üëå</emoji> <b>API Flood"
            " himoya {} sekund uchun to'xtatildi</b>"
        ),
        "on": "<emoji document_id=5458450833857322148>üëå</emoji> <b>Himoya yoqildi</b>",
        "off": (
            "<emoji document_id=5458450833857322148>üëå</emoji> <b>Himoya o'chirildi</b>"
        ),
        "u_sure": "‚ö†Ô∏è <b>Siz ishonchingiz komilmi?</b>",
        "_cfg_time_sample": "Sekundda qabul qilinadigan so'rovlar soni chegarasi",
        "_cfg_threshold": "Himoya yoqish uchun qiymatni chegaralash",
        "_cfg_local_floodwait": (
            "Foydalanuvchi botni ushbu soniya davomida blokirovka qiladi, agar"
            " chegaralar qiymati oshsa"
        ),
        "_cfg_forbidden_methods": "Barcha tashqi modullarda taqiqlangan usullar",
        "btn_no": "üö´ Yo'q",
        "btn_yes": "‚úÖ Ha",
        "web_pin": (
            "üîì <b>Werkzeug Debug PIN kodini ko'rsatish uchun quyidagi tugmani bosing."
            " Uni hech kimga bermang.</b>"
        ),
        "web_pin_btn": "üêû Werkzeug PIN-ni ko'rsatish",
    }

    strings_es = {
        "warning": (
            "<emoji document_id=5312383351217201533>‚ö†Ô∏è</emoji>"
            " <b>¬°Advertencia!</b>\n\nDe acuerdo con la configuraci√≥n de esta cuenta,"
            " las siguientes limitaciones ser√°n aplicadas.\n\nSe bloquear√° <b>a todos"
            " los bots de los usuarios</b> por {} segundos para evitar el exceso de las"
            " limitaciones de Telegram API. Para m√°s informaci√≥n, consulta el archivo"
            " siguiente.\n\nPara obtener ayuda, use el grupo"
            " <code>{prefix}support</code>!\n\nPara permitir que la cuenta funcione,"
            " use <code>{prefix}suspend_api_protect</code> para desbloquear."
        ),
        "args_invalid": (
            "<emoji document_id=5312526098750252863>üö´</emoji> <b>Argumentos"
            " inv√°lidos</b>"
        ),
        "suspended_for": (
            "<emoji document_id=5458450833857322148>üëå</emoji>"
            " <b>Se ha desactivado la protecci√≥n de API por {} segundos</b>"
        ),
        "on": (
            "<emoji document_id=5458450833857322148>üëå</emoji> <b>Protecci√≥n"
            " activada</b>"
        ),
        "off": (
            "<emoji document_id=5458450833857322148>üëå</emoji> <b>Protecci√≥n"
            " desactivada</b>"
        ),
        "u_sure": "‚ö†Ô∏è <b>¬øEst√°s seguro?</b>",
        "_cfg_time_sample": (
            "El tiempo en segundos durante el cual se exceden las limitaciones"
        ),
        "_cfg_threshold": "El valor por encima del cual se exceden las limitaciones",
        "_cfg_local_floodwait": (
            "El tiempo en segundos durante el cual se bloquea al usuario para el bot"
        ),
        "_cfg_forbidden_methods": (
            "Los comandos prohibidos por todas las extensiones externas"
        ),
        "btn_no": "üö´ No",
        "btn_yes": "‚úÖ S√≠",
        "web_pin": (
            "üîì <b>Haga clic en el bot√≥n de abajo para mostrar el PIN de depuraci√≥n de"
            " Werkzeug. No se lo des a nadie.</b>"
        ),
        "web_pin_btn": "üêû Mostrar el PIN de Werkzeug",
    }

    _ratelimiter = []
    _suspend_until = 0
    _lock = False

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "time_sample",
                15,
                lambda: self.strings("_cfg_time_sample"),
                validator=loader.validators.Integer(minimum=1),
            ),
            loader.ConfigValue(
                "threshold",
                100,
                lambda: self.strings("_cfg_threshold"),
                validator=loader.validators.Integer(minimum=10),
            ),
            loader.ConfigValue(
                "local_floodwait",
                30,
                lambda: self.strings("_cfg_local_floodwait"),
                validator=loader.validators.Integer(minimum=10, maximum=3600),
            ),
            loader.ConfigValue(
                "forbidden_methods",
                ["joinChannel", "importChatInvite"],
                lambda: self.strings("_cfg_forbidden_methods"),
                validator=loader.validators.MultiChoice(
                    [
                        "sendReaction",
                        "joinChannel",
                        "importChatInvite",
                    ]
                ),
                on_change=lambda: self._client.forbid_constructors(
                    map(
                        lambda x: CONSTRUCTORS[x], self.config["forbidden_constructors"]
                    )
                ),
            ),
        )

    async def client_ready(self):
        asyncio.ensure_future(self._install_protection())

    async def _install_protection(self):
        await asyncio.sleep(30)  # Restart lock
        if hasattr(self._client._call, "_old_call_rewritten"):
            raise loader.SelfUnload("Already installed")

        old_call = self._client._call

        async def new_call(
            sender: "MTProtoSender",  # type: ignore
            request: "TLRequest",  # type: ignore
            ordered: bool = False,
            flood_sleep_threshold: int = None,
        ):
            if time.perf_counter() > self._suspend_until and not self.get(
                "disable_protection",
                True,
            ):
                request_name = type(request).__name__
                self._ratelimiter += [[request_name, time.perf_counter()]]

                self._ratelimiter = list(
                    filter(
                        lambda x: time.perf_counter() - x[1]
                        < int(self.config["time_sample"]),
                        self._ratelimiter,
                    )
                )

                if (
                    len(self._ratelimiter) > int(self.config["threshold"])
                    and not self._lock
                ):
                    self._lock = True
                    report = io.BytesIO(
                        json.dumps(
                            self._ratelimiter,
                            indent=4,
                        ).encode("utf-8")
                    )
                    report.name = "local_fw_report.json"

                    await self.inline.bot.send_document(
                        self.tg_id,
                        report,
                        caption=self.strings("warning").format(
                            self.config["local_floodwait"],
                            prefix=self.get_prefix(),
                        ),
                    )

                    # It is intented to use time.sleep instead of asyncio.sleep
                    time.sleep(int(self.config["local_floodwait"]))
                    self._lock = False

            return await old_call(sender, request, ordered, flood_sleep_threshold)

        self._client._call = new_call
        self._client._old_call_rewritten = old_call
        self._client._call._hikka_overwritten = True
        logger.debug("Successfully installed ratelimiter")

    async def on_unload(self):
        if hasattr(self._client, "_old_call_rewritten"):
            self._client._call = self._client._old_call_rewritten
            delattr(self._client, "_old_call_rewritten")
            logger.debug("Successfully uninstalled ratelimiter")

    @loader.command(
        ru_doc="<–≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö> - –ó–∞–º–æ—Ä–æ–∑–∏—Ç—å –∑–∞—â–∏—Ç—É API –Ω–∞ N —Å–µ–∫—É–Ω–¥",
        de_doc="<Sekunden> - API-Schutz f√ºr N Sekunden einfrieren",
        tr_doc="<saniye> - API korumasƒ±nƒ± N saniye dondur",
        uz_doc="<soniya> - API himoyasini N soniya o'zgartirish",
        es_doc="<segundos> - Congela la protecci√≥n de la API durante N segundos",
    )
    async def suspend_api_protect(self, message: Message):
        """<time in seconds> - Suspend API Ratelimiter for n seconds"""
        args = utils.get_args_raw(message)

        if not args or not args.isdigit():
            await utils.answer(message, self.strings("args_invalid"))
            return

        self._suspend_until = time.perf_counter() + int(args)
        await utils.answer(message, self.strings("suspended_for").format(args))

    @loader.command(
        ru_doc="–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∑–∞—â–∏—Ç—É API",
        de_doc="API-Schutz einschalten / ausschalten",
        tr_doc="API korumasƒ±nƒ± a√ß / kapat",
        uz_doc="API himoyasini yoqish / o'chirish",
        es_doc="Activar / desactivar la protecci√≥n de API",
    )
    async def api_fw_protection(self, message: Message):
        """Toggle API Ratelimiter"""
        await self.inline.form(
            message=message,
            text=self.strings("u_sure"),
            reply_markup=[
                {"text": self.strings("btn_no"), "action": "close"},
                {"text": self.strings("btn_yes"), "callback": self._finish},
            ],
        )

    @property
    def _pin(self) -> str:
        return logging.getLogger().handlers[0].web_debugger.pin

    async def _show_pin(self, call: InlineCall):
        await call.answer(f"Werkzeug PIN: {self._pin}", show_alert=True)

    @loader.command(
        ru_doc="–ü–æ–∫–∞–∑–∞—Ç—å PIN Werkzeug",
        de_doc="PIN-Werkzeug anzeigen",
        tr_doc="PIN aracƒ±nƒ± g√∂ster",
        uz_doc="PIN vositasi ko'rsatish",
        es_doc="Mostrar herramienta PIN",
    )
    async def debugpin(self, message: Message):
        """Show the Werkzeug PIN"""
        await self.inline.form(
            message=message,
            text=self.strings("web_pin"),
            reply_markup={
                "text": self.strings("web_pin_btn"),
                "callback": self._show_pin,
            },
        )

    async def _finish(self, call: InlineCall):
        state = self.get("disable_protection", True)
        self.set("disable_protection", not state)
        await call.edit(self.strings("on" if state else "off"))
